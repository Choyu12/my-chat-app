import { useState, useEffect } from 'react';
import { db, auth } from '../firebase'; // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á import storage ‡πÅ‡∏•‡πâ‡∏ß
import { doc, updateDoc, getDoc } from 'firebase/firestore';

function ProfileScreen({ currentUser, onBack }) {
  // [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const [userData, setUserData] = useState(null);
  const [displayName, setDisplayName] = useState('');
  const [previewUrl, setPreviewUrl] = useState('');
  const [isSaving, setIsSaving] = useState(false);

  // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firestore ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    const fetchUserData = async () => {
      const userDocRef = doc(db, 'users', currentUser.uid);
      const userDoc = await getDoc(userDocRef);
      if (userDoc.exists()) {
        const data = userDoc.data();
        setUserData(data);
        setDisplayName(data.displayName || '');
        setPreviewUrl(data.photoURL || '');
      }
    };
    fetchUserData();
  }, [currentUser.uid]);
  
  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ
  const handleImageChange = (e) => {
    if (e.target.files[0]) {
      const file = e.target.files[0];
      
      if (file.size > 2 * 1024 * 1024) { // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà 2MB
        alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2MB');
        return;
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô Base64 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // VVVVVVVV [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î] VVVVVVVV
  // [‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ Base64)
  const handleSaveProfile = async () => {
    if (!displayName.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á');
      return;
    }

    setIsSaving(true);
    try {
      const userDocRef = doc(db, 'users', currentUser.uid);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡∏∞ URL ‡∏£‡∏π‡∏õ (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64 string) ‡∏•‡∏á Firestore
      await updateDoc(userDocRef, {
        displayName: displayName.trim(),
        photoURL: previewUrl,
      });
      
      alert('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      onBack();
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå');
    } finally {
      setIsSaving(false);
    }
  };
  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  const getAvatarUrl = () => {
    if (previewUrl) return previewUrl;
    if (userData?.photoURL) return userData.photoURL;
    // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
    return `https://ui-avatars.com/api/?name=${encodeURIComponent((displayName || 'A').charAt(0))}&size=256&background=667eea&color=fff&bold=true`;
  };

  if (!userData) {
    return <div>Loading...</div>; // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ loading ‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  }

  return (
    <div className="profile-container">
      <div className="profile-header">
        <button onClick={onBack} className="back-btn">{'< Back'}</button>
        <h2>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</h2>
      </div>
      
      <div className="profile-form">
        <div className="avatar-preview">
          <img src={getAvatarUrl()} alt="Profile" />
          <label htmlFor="profile-image-upload" className="avatar-upload-btn">
            üì∑
          </label>
        </div>
        
        <input 
          type="file" 
          id="profile-image-upload"
          accept="image/*" 
          onChange={handleImageChange}
          style={{ display: 'none' }}
        />
        
        <div className="form-group">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á</label>
          <input 
            type="text" 
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            maxLength={50}
          />
        </div>
        
        <div className="form-group">
          <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
          <input 
            type="email" 
            value={currentUser.email}
            disabled
            className="disabled-input"
          />
        </div>
        
        <button 
          onClick={handleSaveProfile} 
          disabled={isSaving}
          className="save-btn"
        >
          {isSaving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'}
        </button>
      </div>
    </div>
  );
}

export default ProfileScreen;